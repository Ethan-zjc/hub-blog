(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{437:function(s,a,e){"use strict";e.r(a);var n=e(4),t=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"初识ast"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初识ast"}},[s._v("#")]),s._v(" 初识AST")]),s._v(" "),a("p",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://raw.githubusercontent.com/Ethan-zjc/picx-images-hosting/master/image2023-11-30_16-11-42.6sljy811qv40.webp",width:"500"}})]),s._v(" "),a("p",[s._v("掌握了AST，相当于掌握了控制代码的代码能力")]),s._v(" "),a("h2",{attrs:{id:"什么是ast"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是ast"}},[s._v("#")]),s._v(" 什么是ast")]),s._v(" "),a("p",[s._v("It is a hierarchical program representation that presents source code structure according to the grammar of a programming language, each AST node corresponds to an item of a source code.\n它是一种分层的程序表示，根据编程语言的语法表示源代码结构，每个AST节点对应于源代码的一项。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Ethan-zjc/picx-images-hosting/master/image2023-11-30_16-5-13.n22as0ah2g.webp",alt:""}})]),s._v(" "),a("h2",{attrs:{id:"ast的抽象结构标准"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ast的抽象结构标准"}},[s._v("#")]),s._v(" ast的抽象结构标准？")]),s._v(" "),a("p",[s._v("JavaScript AST 的结构 遵循的是ESTree 标准， 无论babel、或者Esprima、Acorn https://github.com/estree/estree， estree是由多个 JavaScript 解析器和编译器开发者、工具和库的贡献者们共同制定和维护")]),s._v(" "),a("p",[s._v("HTML 的解析通常会生成 DOM（文档对象模型），它是由浏览器中的 HTML 解析器创建的一种树形结构，表示 HTML 文档的层次结构，暂时没有类似estree统一的标准规范制定， 例如htmlparser解析工具")]),s._v(" "),a("p",[s._v("CSS 的解析通常会生成样式表对象模型（CSSOM），它类似于 DOM，是表示 CSS 样式表的一种树形结构。CSSOM 由浏览器中的 CSS 解析器创建 。 例如postcss解析工具")]),s._v(" "),a("h2",{attrs:{id:"为什么要了解ast"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要了解ast"}},[s._v("#")]),s._v(" 为什么要了解ast")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Ethan-zjc/picx-images-hosting/master/image2023-11-30_16-9-40.3gfu0a740dm0.webp",alt:""}}),s._v("\n掌握了AST，相当于掌握了控制代码的代码能力，可以帮助我们拓宽思路和视野，不管是写框架，还是写工具和逻辑，AST都会成为我们的得力助手")]),s._v(" "),a("h2",{attrs:{id:"ast-在编译中的位置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ast-在编译中的位置"}},[s._v("#")]),s._v(" AST 在编译中的位置")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Ethan-zjc/picx-images-hosting/master/image2023-11-30_16-11-42.6sljy811qv40.webp",alt:""}}),s._v("\n在编译原理中，编译器转换代码通常要经过三个步骤：词法分析（Lexical Analysis）、语法分析（Syntax Analysis）、代码生成（Code Generation），如下图：")]),s._v(" "),a("h3",{attrs:{id:"词法分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#词法分析"}},[s._v("#")]),s._v(" 词法分析")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://resources.jointjs.com/demos/rappid/apps/Ast/index.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("词法分析工具"),a("OutboundLink")],1),s._v(" "),a("a",{attrs:{href:"https://esprima.org/demo/parse.html#",target:"_blank",rel:"noopener noreferrer"}},[s._v("词法分析工具"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("词法分析阶段是编译过程的第一个阶段，这个阶段的任务是从左到右一个字符一个字符地读入源程序，然后根据构词规则识别单词，生成 token 符号流，比如 isPanda('🐼')，会被拆分成 isPanda，(，'🐼'，) 四部分，每部分都有不同的含义，可以将词法分析过程想象为不同类型标记的列表或数组。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Ethan-zjc/picx-images-hosting/master/2501174-20220427101354716-611471191.6pxjv3v3ab00.gif",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"语法分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法分析"}},[s._v("#")]),s._v(" 语法分析")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://astexplorer.net/",target:"_blank",rel:"noopener noreferrer"}},[s._v("语法分析工具"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("语法分析是编译过程的一个逻辑阶段，语法分析的任务是在词法分析的基础上将单词序列组合成各类语法短语，比如“程序”，“语句”，“表达式”等，前面的例子中，isPanda('🐼') 就会被分析为一条表达语句 ExpressionStatement，isPanda() 就会被分析成一个函数表达式 CallExpression，就会被分析成一个变量 Literal 等，众多语法之间的依赖、嵌套关系，就构成了一个树状结构，即 AST 语法树。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Ethan-zjc/picx-images-hosting/master/2501174-20220427101415313-1435211089.10wlanw3xt5s.gif",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"代码生成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码生成"}},[s._v("#")]),s._v(" 代码生成")]),s._v(" "),a("p",[s._v("代码生成是最后一步，将 AST 语法树转换成可执行代码即可，在转换之前，我们可以直接操作语法树，进行增删改查等操作，例如，我们可以确定变量的声明位置、更改变量的值、删除某些节点等，我们将语句 isPanda('🐼') 修改为一个布尔类型的 Literal：true，语法树就有如下变化：\n"),a("img",{attrs:{src:"https://raw.githubusercontent.com/Ethan-zjc/picx-images-hosting/master/2501174-20220427101416281-1772382765.72g0vvptagw0.gif",alt:""}})]),s._v(" "),a("h2",{attrs:{id:"babel-相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#babel-相关"}},[s._v("#")]),s._v(" Babel 相关")]),s._v(" "),a("p",[s._v("Babel 包含的各种功能包、API、各方法可选参数等，在实际使用过程中，可以安装如下 npm install @babel/core @babel/parser @babel/traverse @babel/generator")]),s._v(" "),a("p",[s._v("在做逆向解混淆中，主要用到了 Babel 的以下几个功能包：")]),s._v(" "),a("p",[s._v("@babel/core：Babel 编译器本身，提供了 babel 的编译 API；\n@babel/parser：将 JavaScript 代码解析成 AST 语法树；\n@babel/traverse：遍历、修改 AST 语法树的各个节点；\n@babel/generator：将 AST 还原成 JavaScript 代码；\n@babel/types：判断、验证节点的类型、构建新 AST 节点等。")]),s._v(" "),a("p",[s._v("@babel/core\nBabel 编译器本身，被拆分成了三个模块：@babel/parser、@babel/traverse、@babel/generator，比如以下方法的导入效果都是一样的：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const parse = require("@babel/parser").parse;\nconst parse = require("@babel/core").parse;\n\nconst traverse = require("@babel/traverse").default\nconst traverse = require("@babel/core").traverse\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("@babel/parser"),a("br"),s._v("\n@babel/parser 可以将 JavaScript 代码解析成 AST 语法树，其中主要提供了两个方法：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("parser.parse(code, [{options}])：解析一段 JavaScript 代码；<br>\nparser.parseExpression(code, [{options}])：考虑到了性能问题，解析单个 JavaScript 表达式。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("以下看个具体的例子、源码：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/**\n * 专题&章节封面图,占位图placeholder,根据屏幕宽度自适应拼接前端别名后缀\n */\nimport { util_feSuffix } from '../../util.js';\nconst computedBehavior = require('miniprogram-computed');\n\nComponent({\n    behaviors: [computedBehavior],\n    properties: {\n        src: {\n            type: String,\n            value: '',\n        },\n        width: {\n            type: Number,\n            value: 0,\n        },\n        height: {\n            type: Number,\n            value: 0,\n        },\n        isBg: {\n            type: Boolean,\n            value: false,\n        },\n        mode: {\n            type: String,\n            value: 'aspectFill',\n        },\n        quality: {\n            type: Boolean,\n            value: false,\n        },\n        isSuffix: {\n            type: Boolean,\n            value: true,\n        },\n        index: {\n            type: [String, Number],\n            value: 0,\n        },\n    },\n    data: {\n        loaded: false,\n        test11: [1, 2, 3],\n    },\n    computed: {\n        style(data) {\n            const { width, height } = data;\n            if (width > height) {\n                // 宽图\n                return `width: ${height}rpx; height: ${height / 2}rpx;`;\n            } else {\n                //  长图\n                return `width: ${width / 2}rpx; height: ${width / 4}rpx;`;\n            }\n        },\n    },\n    watch: {\n        src: function () {\n            setTimeout(() => {\n                this.init();\n            }, 200);\n        },\n    },\n    methods: {\n        init() {\n            const { src, width, quality, isSuffix } = this.data;\n            if (!src) {\n                console.log('检查是否传递了src');\n                return;\n            }\n            this.setData({\n                computedSrc: isSuffix ? util_feSuffix({ src, width, quality }) : src,\n            });\n        },\n\n        loaded() {\n            this.setData({ loaded: true });\n            this.setEvent();\n        },\n        setEvent() {\n            let event = 'onImageLoad';\n            let index = this.data.index;\n            this.triggerEvent(event, { index });\n        },\n    },\n});\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br")])]),a("p",[s._v("转换后的ast结构\n"),a("img",{attrs:{src:"https://raw.githubusercontent.com/Ethan-zjc/picx-images-hosting/master/image2023-11-30_16-31-25.5ebzdlk8qbk0.webp",alt:""}})]),s._v(" "),a("p",[s._v("例如我们在将微信的代码转化为百度小程序是，因为百度不支持miniprogram-computed依赖引入以及behaviors注入，第一行为VariableDeclaration节点类型")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("traverse(result, {\n    // 删除js中computedBehavior引用\n    VariableDeclaration(path) {\n        path.node.declarations.forEach((item) => {\n            if (item.id.name == 'computedBehavior') {\n                path.remove();\n            }\n        })\n    },\n\tObjectProperty(path) {\n        if (path.node.key.name === 'behaviors' && path.node.value.type === 'ArrayExpression') {\n            const elements = path.node.value.elements;\n            const index = elements.findIndex((item) => item.name == 'computedBehavior');\n            if (index > -1) {\n                elements.splice(index, 1);\n            }\n        }\n    }\n})\n\n\n或者\ntraverse(result, {\n    // 删除js中computedBehavior引用\n    VariableDeclaration: {\n        enter(path) {\n            path.node.declarations.forEach((item) => {\n                if (item.id.name == 'computedBehavior') {\n                    path.remove();\n                }\n            })\n        },\n    },\n    ObjectProperty: {\n        enter(path) {\n            if (\n                path.node.key.name === 'behaviors' &&\n                path.node.value.type === 'ArrayExpression'\n            ) {\n                const elements = path.node.value.elements;\n                const index = elements.findIndex((item) => item.name == 'computedBehavior');\n                if (index > -1) {\n                    elements.splice(index, 1);\n                }\n            }\n        },\n    },\n});\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br")])]),a("p",[s._v("以上几种写法中有用到了 enter 方法，在节点的遍历过程中，进入节点（enter）与退出（exit）节点都会访问一次节点，traverse 默认在进入节点时进行节点的处理，如果要在退出节点时处理，那么在 visitor 中就必须声明 exit 方法"),a("br"),s._v("\n以上修改ast之后，当我们执行generate之后即得到我们修改之后的代码，使用"),a("a",{attrs:{href:"https://astexplorer.net/",target:"_blank",rel:"noopener noreferrer"}},[s._v("astexplorer"),a("OutboundLink")],1),s._v("查看")]),s._v(" "),a("h2",{attrs:{id:"babel-traverse节点类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#babel-traverse节点类型"}},[s._v("#")]),s._v(" babel/traverse节点类型")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("Identifier：标识符  \nLiteral：字面量（数字、字符串、布尔值等）  \nBinaryExpression：二元表达式（如加法、减法）  \nUnaryExpression：一元表达式（如取反、递增、递减）  \nLogicalExpression：逻辑表达式（如逻辑与、逻辑或）  \nAssignmentExpression：赋值表达式  \nConditionalExpression：条件表达式  \nCallExpression：函数调用表达式  \nFunctionDeclaration：函数声明  \nArrowFunctionExpression：箭头函数表达式  \nObjectExpression：对象表达式  \nArrayExpression：数组表达式  \nMemberExpression：成员表达式  \nIfStatement：if 语句  \nSwitchStatement：switch 语句  \nForStatement：for 循环语句  \nWhileStatement：while 循环语句  \nDoWhileStatement：do-while 循环语句  \nBreakStatement：break 语句  \nContinueStatement：continue 语句  \nReturnStatement：return 语句  \nThrowStatement：throw 语句  \nTryStatement：try-catch 语句  \nBlockStatement：代码块  \nExpressionStatement：表达式语句  \n")])])]),a("h2",{attrs:{id:"traverse节点遍历方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#traverse节点遍历方法"}},[s._v("#")]),s._v(" traverse节点遍历方法")]),s._v(" "),a("h3",{attrs:{id:"基础节点遍历方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础节点遍历方法"}},[s._v("#")]),s._v(" 基础节点遍历方法")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("Identifier 用于访问标识符节点  \nVariableDeclaration 用于访问变量声明节点  \nFunctionDeclaration 用于访问函数声明节点  \n")])])]),a("h3",{attrs:{id:"表达式节点遍历方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表达式节点遍历方法"}},[s._v("#")]),s._v(" 表达式节点遍历方法")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("CallExpression 用于访问调用表达式节点  \nMemberExpression 用于访问成员表达式节点  \nBinaryExpression 用于访问二元表达式节点  \nUnaryExpression 用于访问一元表达式节点  \nObjectExpression 用于访问对象表达式节点  \nArrayExpression 用于访问数组表达式节点  \nConditionalExpression 用于访问条件表达式节点  \n")])])]),a("h2",{attrs:{id:"path节点操作方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#path节点操作方法"}},[s._v("#")]),s._v(" path节点操作方法")]),s._v(" "),a("h3",{attrs:{id:"添加节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加节点"}},[s._v("#")]),s._v(" 添加节点")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("path.pushContainer() 用于在容器节点中添加子节点  \npath.insertBefore() 用于在当前节点之前插入新节点  \npath.insertAfter() 用于在当前节点之后插入新节点  \n")])])]),a("h3",{attrs:{id:"移除节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#移除节点"}},[s._v("#")]),s._v(" 移除节点")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("path.remove() 用于移除当前节点  \npath.replaceWith() 用于替换当前节点  \n")])])]),a("h3",{attrs:{id:"获取节点信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取节点信息"}},[s._v("#")]),s._v(" 获取节点信息")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("path.node 用于访问当前节点的 AST 信息  \npath.parent 用于访问当前节点的父节点  \npath.get() 用于获取指定路径下的节点  \n")])])]),a("h3",{attrs:{id:"其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[s._v("#")]),s._v(" 其他")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[s._v("path.skip 方法用于跳过当前节点的后代节点  \npath.skipKey 方法用于跳过特定的节点键的遍历  \npath.traverse 是 NodePath 对象的方法，可以在特定节点上进行遍历  \n")])])]),a("h2",{attrs:{id:"ast工具和v8编译"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ast工具和v8编译"}},[s._v("#")]),s._v(" AST工具和V8编译")]),s._v(" "),a("p",[s._v("对比 AST 标准工具与 V8 引擎的编译过程")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/Ethan-zjc/picx-images-hosting/master/image2023-11-30_17-19-56.23w3ibwi77r4.webp",alt:""}})]),s._v(" "),a("p",[s._v("AST 标准工具与 V8 引擎处理代码的过程有一定的重合，不同的是，V8 将 AST 转换为字节码后进入执行代码的阶段，而 AST 标准工具只是将旧代码转换为新代码")])])}),[],!1,null,null,null);a.default=t.exports}}]);